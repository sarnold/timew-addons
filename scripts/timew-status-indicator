#!/usr/bin/env python3
"""
A Timew status indicator for monitoring tracked hours.
"""

import os
import signal
import subprocess
import time
import typing
from collections import Counter
from datetime import timedelta
from threading import Thread

import gi

gi.require_version("Gtk", "3.0")
gi.require_version('Notify', '0.7')

try:
    gi.require_version('AyatanaAppIndicator3', '0.1')
    from gi.repository import AyatanaAppIndicator3 as appindicator
except ValueError:
    gi.require_version('AppIndicator3', '0.1')
    from gi.repository import AppIndicator3 as appindicator

from gi.repository import Gtk, Notify

from timew_status import (
    CFG,
    __version__,
    get_state_icon,
    get_state_str,
    get_status,
    run_cmd,
)

APP_VERSION = __version__
APPINDICATOR_ID = 'timew_status_indicator'
COUNT: typing.Counter[str] = Counter()
SLEEP_SEC = CFG['loop_idle_seconds']


class TextWindow(Gtk.Window):
    def __init__(self, tag_text):
        Gtk.Window.__init__(self, title="Edit timew tag")
        self.set_icon_name('timew')
        self.set_position(Gtk.WindowPosition.CENTER)
        self.set_size_request(400, 100)

        self.timeout_id = None

        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        self.add(vbox)

        self.entry = Gtk.Entry()
        self.entry.set_text(tag_text)
        vbox.pack_start(self.entry, True, True, 0)

        hbox = Gtk.Box(spacing=6)
        vbox.pack_start(hbox, True, True, 0)

        button = Gtk.Button.new_with_mnemonic("_Save")
        button.connect("clicked", self.on_save_clicked)
        hbox.pack_start(button, True, True, 0)

        button = Gtk.Button.new_with_mnemonic("_Cancel")
        button.connect("clicked", self.on_cancel_clicked)
        hbox.pack_start(button, True, True, 0)

    def on_save_clicked(self, button):
        new_text = self.entry.get_text()
        CFG['default_jtag_str'] = new_text
        print(f'new tag text: {new_text}')
        self.destroy()

    def on_cancel_clicked(self, button):
        print("Closing window")
        self.destroy()


class Indicator:
    def __init__(self):
        self.app_id = APPINDICATOR_ID
        app_category = appindicator.IndicatorCategory.APPLICATION_STATUS
        icon_name = get_state_icon('INACTIVE')
        self.indicator = appindicator.Indicator.new(self.app_id, icon_name, app_category)

        self.indicator.set_status(appindicator.IndicatorStatus.ACTIVE)
        self.indicator.set_menu(self.create_menu())
        self.last_tag = CFG['default_jtag_str']

        # setup the state updater thread
        self.update = Thread(target=self.check_for_new_state)
        self.update.daemon = True
        self.update.start()

    def check_for_new_state(self):
        """
        Check for new state msg and update icon if new.
        """
        old_state = 'INACTIVE'
        new_state = 'INACTIVE'
        guide = '99999999'

        while True:
            current_tick_count = timedelta(seconds=COUNT['SeatTick'])
            result = get_status()
            if result.returncode == 1:
                new_state = 'INACTIVE'
                print(f'State {new_state} msg: {result.stdout.decode().strip()}')
            else:
                proc, _ = run_cmd()
                msg, new_state = get_state_str(proc, current_tick_count)
                print(f'State {new_state} msg: {msg.strip()}')
            # if there is a change in state, update the icon
            if old_state != new_state:
                self.indicator.set_icon_full(get_state_icon(new_state), new_state)
                if CFG['show_state_label']:
                    # note the second label arg should be the longest possible label str
                    self.indicator.set_label(new_state.format().center(8), guide)
                Notify.Notification.new("Timew state", msg, None).show()
            old_state = new_state
            COUNT['SeatTick'] += SLEEP_SEC
            time.sleep(SLEEP_SEC)

    def create_menu(self):
        menu = Gtk.Menu()
        item_start = Gtk.MenuItem(label='Start')
        item_start.connect('activate', self.startd)
        menu.append(item_start)

        item_stop = Gtk.MenuItem(label='Stop')
        item_stop.connect('activate', self.stopd)
        menu.append(item_stop)

        item_status = Gtk.MenuItem(label='Status')
        item_status.connect('activate', self.statusd)
        menu.append(item_status)

        item_entry = Gtk.MenuItem(label='Edit  start  tag')
        item_entry.connect('activate', self.open_entry)
        menu.append(item_entry)

        item_terminal = Gtk.MenuItem(label='Open  terminal')
        item_terminal.connect('activate', self.open_terminal)
        menu.append(item_terminal)

        item_separator = Gtk.SeparatorMenuItem()
        menu.append(item_separator)

        item_about = Gtk.MenuItem(label='About ...')
        item_about.connect('activate', self.about)
        menu.append(item_about)

        item_quit = Gtk.MenuItem(label='Quit')
        item_quit.connect('activate', self.stop)
        menu.append(item_quit)

        menu.show_all()
        return menu

    def about(self, source):
        dlg = Gtk.AboutDialog()
        dlg.set_name('About...')
        dlg.set_program_name('Timew Status Indicator')
        dlg.set_version(APP_VERSION)
        dlg.set_copyright('Â© 2024 Stephen L Arnold')
        dlg.set_license_type(Gtk.License.GPL_3_0)
        dlg.set_logo_icon_name(get_state_icon('APP'))
        dlg.set_website('https://github.com/sarnold/timewarrior-addons')
        dlg.set_website_label('github.com')
        dlg.set_comments(
            """
            A timewarrior monitoring control and status tool.
            """
        )
        dlg.set_authors(['Stephen L Arnold <stephen.arnold42@gmail.com>'])
        dlg.set_artists(['Stephen L Arnold <stephen.arnold42@gmail.com>'])
        dlg.run()
        dlg.hide()

    def open_entry(self, source):
        """Open the text entry window"""
        win = TextWindow(tag_text=self.last_tag)
        win.show_all()

    def open_terminal(self, source):
        """Simply opens a new terminal window"""
        subprocess.Popen([CFG["terminal_emulator"]])

    def stop(self, source):
        Notify.uninit()
        Gtk.main_quit()

    def startd(self, source):
        _, svc_msg = run_cmd(action='start', tag=self.last_tag)
        self.indicator.set_icon_full(get_state_icon('ACTIVE'), 'ACTIVE')
        Notify.Notification.new("Timew status", svc_msg, None).show()

    def statusd(self, source):
        _, svc_msg = run_cmd()
        Notify.Notification.new("Timew status", svc_msg, None).show()

    def stopd(self, source):
        _, svc_msg = run_cmd(action='stop')
        if CFG['use_last_tag']:
            self.last_tag = svc_msg
        self.indicator.set_icon_full(get_state_icon('INACTIVE'), 'INACTIVE')
        if CFG['show_state_label']:
            self.indicator.set_label('INACTIVE'.format().center(9), '99999999')
        Notify.Notification.new("Timew status", svc_msg, None).show()


def main():
    Indicator()
    Notify.init(APPINDICATOR_ID)
    Gtk.main()


if __name__ == "__main__":
    os.environ["INDICATOR_FMT"] = "1"
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    main()
